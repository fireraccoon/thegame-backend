{% extends 'base.html.twig' %}
{% block title %}
  {{ challenge.title }} - {{ parent() }}
{% endblock %}

{% block content %}
<div id="challenge">
</div>


<div id="scores" class="well">

</div>
{% endblock %}


{% block react %}
  {% include 'react_components/lite.js' %}
  {% include 'react_components/modals.js' %}
  {% include 'react_components/charts.js' %}
  {% include 'react_components/forms.js' %}



// Controller. responsible for making communication with the server
// and updating the views accordingly. It is the bridge between server model/logic
// and the views
var Controller = Lite.EventController({

    fetchDelay: 5000,
    onEvent: {
        // Called when the news feed View is Ready to be updated
        onScoreListReadyEvent: function() {
            var self = this.self;
            self.fetchChallengeData();
            setInterval(self.fetchChallengeData.bind(self), self.fetchDelay);
        },

        onSuccesRequestEvent : function() {
          var self = this.self;
          $.ajax({
            url: "{{ path('api_challenge') }}",
            type: 'GET',
            dataType: 'json',
            data: {action: 'complete', challengeId: '{{ challenge.id }}'},
          })
          .done(function() {
            // force fetch
            self.fetchChallengeData()
          })
          .fail(function() {
            console.log("error");
          })
        },

        onCancelSuccesRequestEvent : function() {
          var self = this.self;
          $.ajax({
            url: "{{ path('api_challenge') }}",
            type: 'GET',
            dataType: 'json',
            data: {action: 'cancel', challengeId: '{{ challenge.id }}'},
          })
          .done(function() {
            // force fetch
            self.fetchChallengeData()
          })
          .fail(function() {
            console.log("error");
          })
        },
    },

    // Get scores from the server and call update on views
    // with the data received
    fetchChallengeData: function() {
        $.ajax({
            url: "{{ path('api_challenge')}}",
            type: 'GET',
            dataType: 'json',
            data: {action: 'get', challengeId: '{{ challenge.id }}'},
        })
        .done(function(data) {
            Lite.EventManager.fireEvent('UpdateScoreListEvent', data.challenge);
        })
        .fail(function(data) {
            console.log("error");
        })
    },

});
Controller.registerToSource(Lite.EventManager);


// A loading icon spining and displaying "loading..."
var LoadingIcon = React.createClass({

    render: function() {
        return (
            <div>
                <button className="btn btn-lg btn-warning">
                    <i className="fa fa-circle-o-notch fa-spin fa-fw"></i>
                    Loading...
                </button>
            </div>
        );
    }
});


var ChallengeView = Lite.createClass({
    getInitialState: function() {
      return {
        challenge: undefined,
      };
    },

    render: function(){
        var challenge = this.state.challenge;

        if (challenge == undefined) {
          challenge = {
            title : "{{ challenge.title }}",
            description : "{{ challenge.description }}",
            nbPoints : "{{ challenge.nbPoints }}"
          }
        }

        return (
          <div className="panel panel-default">
              <div className="panel-body">
                  <div className="row">
                      <div className="col-md-10">
                          <h2 className="challenge-title">{challenge.title}</h2>
                          <p>{challenge.description}</p>
                      </div>
                      <div className="col-md-2">
                        <h2>{challenge.nbPoints} pts</h2>
                      </div>
                  </div>
              </div>
              <div className="panel-footer">
                  <SuccessControls />
              </div>
          </div>
        );
    }
});


var SuccessControls = Lite.createClass({
  getInitialState: function() {
    return {
      nbTimes : 0,
    };
  },

  onEvent: {
    onUpdateScoreListEvent : function(emitter, challenge) {
      var scores = challenge.scores;
      // Find current user's score
      var currentUserId = {{ app.user.id }};
      for (var i = scores.length - 1; i >= 0; i--) {
          var score = scores[i];
          score.rank = i +1;
          if(score.user.id == currentUserId){
            this.self.setState({ nbTimes: score.nbTimes });
          }
      };
    },
  },

  onSuccessClick: function() {
    Lite.EventManager.fireEvent("SuccesRequestEvent");
    // interpolate
    this.setState({nbTimes: this.state.nbTimes + 1});
  },

  onCancelSuccesClick: function() {
    Lite.EventManager.fireEvent("CancelSuccesRequestEvent");
    // interpolate
    var newValue = Math.max(this.state.nbTimes - 1, 0);
    this.setState({nbTimes: newValue});

  },

  render: function() {
    return (
      <div id="succes-controls">
        <div className="btn-group btn-group-lg" role="group" aria-label="...">
          <button type="button" className="btn btn-success" onClick={this.onSuccessClick}>
            <span className="glyphicon glyphicon-ok" aria-hidden="true"></span>
          </button>
          <button type="button" className="btn btn-default">{ this.state.nbTimes }</button>
          <button type="button" className="btn btn-danger" onClick={this.onCancelSuccesClick}>
            <span className="glyphicon glyphicon-remove" aria-hidden="true"></span>
          </button>
        </div>
      </div>
    );
  },
});


// Represents a Score
var ScoreView = Lite.createClass({
    render: function(){
        var score = this.props.score;
        var nbPoints = this.props.nbPoints;
        var icon;
        var specialClass;
        if(score.rank == 1){
          icon = (<i className="fa fa-star" aria-hidden="true"></i>);
          specialClass = "success";
        }
        return (
          <tr className={specialClass}>
            <td>{score.rank} {icon}</td>
            <td>{score.user.username}</td>
            <td>{score.nbTimes}</td>
            <td>{score.nbTimes * nbPoints}</td>
          </tr>
        );
    }
});

// The list of scores
var ScoreList = Lite.createClass({

    getInitialState: function() {
        return {
            challenge: undefined,
            scores: undefined
        }
    },

    onComponentMounted: function() {
        Lite.EventManager.fireEvent('ScoreListReadyEvent');
    },

    onEvent: {
        // Controller requested an Update
        onUpdateScoreListEvent: function(emitter, challenge) {
            this.self.setState({
              challenge: challenge,
              scores: challenge.scores
            });

            // Sort scores
            var scores = this.self.state.scores;
            scores.sort(Lite.sortBy('nbTimes', true));

            // Give a rank to scores now that they are sorted
            for (var i = scores.length - 1; i >= 0; i--) {
              scores[i].rank = (i + 1);
            };
        },
    },

    render: function() {
        // When not ready
        if (this.state.scores == undefined) {
            return (
                <div>
                    <h3>Loading scores ...</h3>
                    <LoadingIcon />
                </div>
            );
        }

        // When empty notification list
        if (this.state.scores.length == 0){
            return (
                <div>
                   <p>No one achieved this one yet ...</p>
                </div>
            );
        }
        var nbPoints = this.state.challenge.nbPoints;
        var scoreNodes = this.state.scores.map(function(score) {
            return (
                <ScoreView score={score}
                           key={score.rank}
                           nbPoints={nbPoints}
                          />
            );
        });

        return (
            <table className="table table-bordered table-striped table-responsive">
              <thead>
                <tr>
                  <th>Rank</th>
                  <th>User</th>
                  <th>Number of times</th>
                  <th>Total points</th>
                </tr>
              </thead>
              <tbody>
                {scoreNodes}
              </tbody>
            </table>
        );
    }
});


ReactDOM.render(
  <ChallengeView />,
  document.getElementById('challenge')
);

ReactDOM.render(
    <ScoreList />,
    document.getElementById('scores')
);



{% endblock %}