{% extends 'base.html.twig' %}
{% block title %}
  Challenges - {{ parent() }}
{% endblock %}

{% block content %}
<div class="well">
  <h1 class="text-center"><img src="{{ asset('img/challenge.png') }}" width="400px" alt="Challenges"></h1>
  <h2 class="text-center">Challenges</h2>
  <div id="challenges"></div>
</div>


{% endblock %}


{% block react %}
  {% include 'react_components/lite.js' %}
  {% include 'react_components/modals.js' %}
  {% include 'react_components/charts.js' %}
  {% include 'react_components/forms.js' %}


// Controller. responsible for making communication with the server
// and updating the views accordingly. It is the bridge between server model/logic
// and the views
var Controller = Lite.EventController({

    fetchDelay: 5000,
    onEvent: {
        // Called when the news feed View is Ready to be updated
        onChallengeListReadyEvent: function() {
            var self = this.self;
            self.fetchChallenges();
            setInterval(self.fetchChallenges.bind(self), self.fetchDelay);
        },
    },

    // Get challenges from the server and call update on views
    // with the data received
    fetchChallenges: function() {
        $.ajax({
            url: "{{ path('api_challenge')}}",
            type: 'GET',
            dataType: 'json',
            data: {action: 'get', challengeId: 'all'},
        })
        .done(function(data) {
            Lite.EventManager.fireEvent('UpdateChallengeListEvent', data.challenges);
        })
        .fail(function(data) {
            console.log("error");
        })
    },

});
Controller.registerToSource(Lite.EventManager);


var LoadingIcon = React.createClass({

    render: function() {
        return (
            <div>
                <button className="btn btn-lg btn-warning">
                    <i className="fa fa-circle-o-notch fa-spin fa-fw"></i>
                    Loading...
                </button>
            </div>
        );
    }
});


var challengeFormListener = FormListener();
var challengeSchema = {
  title:       {type : "text",     label : "Title",       },
  description: {type : "textarea", label : "Description", },
  nbPoints:    {type : "text",     label : "nbPoints",    }
};
var CreateChallengeTrigger = Lite.createClass({
    onEvent: {
        onFormOKEvent: function() {
            bootbox.alert('Challenge created succesfully');
        },
    },

    render: function() {
        return (
            <ModalTrigger text="Create challenge" type="primary">
              <ModalForm
                    submitUrl="{{ path('api_challenge') }}"
                    submitUrlParams={ {action: 'create'} }
                    formSchema={challengeSchema}
                    formId="create_challenge_form"
                    title="Create challenge"
              />
            </ModalTrigger>
        );
    }
});


var ChallengeView = Lite.createClass({

    render: function(){
        var challenge = this.props.challenge;
        var footerDiv; // Todo Comments
        return (
          <div className="panel panel-default">
              <div className="panel-body">
                  <div className="row">
                      <div className="col-md-10">
                          <h2 className="challenge-title"><a href={ this.props.link }>{challenge.title}</a></h2>
                          <p>{challenge.description}</p>
                      </div>
                      <div className="col-md-2">
                        <h2>{challenge.nbPoints} pts</h2>
                      </div>
                  </div>
              </div>
              {footerDiv}
          </div>
        );
    }
});

var ChallengeList = Lite.createClass({

    getInitialState: function() {
        return {
            challenges: undefined
        }
    },

    onComponentMounted: function() {
        Lite.EventManager.fireEvent('ChallengeListReadyEvent');
    },

    onEvent: {
        // Controller requested an Update
        onUpdateChallengeListEvent: function(emitter, challenges) {
            this.self.setState({challenges: challenges});
        },
    },

    render: function() {
        // When not ready
        if (this.state.challenges == undefined) {
            return (
                <div>
                    <h3>Loading challenges ...</h3>
                    <LoadingIcon />
                </div>
            );
        }

        // When empty notification list
        if (this.state.challenges.length == 0){
            return (
                <div>
                   <p>There are no challenges yet ...</p>
                   <CreateChallengeTrigger />
                </div>
            );
        }


        var deleteUrl = this.props.deleteUrl
        var renderControls = this.props.renderControls;
        var challengeNodes = this.state.challenges.map(function(challenge) {
             // TODO replace with Javascript routing bundle
            var url = '{{ path("view_challenge", {'challengeId': 'challengeId'}) }}';
            url = url.replace("challengeId", challenge.id);
            return (
                <ChallengeView challenge={challenge}
                             key={challenge.id}
                             link={url}
                             />
            );
        });


        return (
            <div>
                <div id="challenge-controls">
                    <CreateChallengeTrigger />
                </div>
                <div id="challengeList">
                    {challengeNodes}
                </div>
            </div>
        );
    }
});



ReactDOM.render(
    <ChallengeList />,
    document.getElementById('challenges')
);



{% endblock %}