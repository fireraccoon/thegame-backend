{% extends 'base.html.twig' %}
{% block title %}
  Leaderboard - {{ parent() }}
{% endblock %}

{% block content %}
<div id="challenge">
</div>

<div id="leaderboard" class="well">
  {# <h1>Leaderboard</h1> #}
  <h1 class="text-center"><img src="{{ asset('img/leaderboard.png') }}" width="500px" alt="Leaderboard"></h1>
  <h2 class="text-center">Leaderboard</h2>
  <div id="ranks"></div>
</div>
{% endblock %}


{% block react %}
  {% include 'react_components/lite.js' %}
  {% include 'react_components/modals.js' %}
  {% include 'react_components/charts.js' %}
  {% include 'react_components/forms.js' %}



// Controller. responsible for making communication with the server
// and updating the views accordingly. It is the bridge between server model/logic
// and the views
var Controller = Lite.EventController({

    fetchDelay: 5000,
    onEvent: {
        // Called when the news feed View is Ready to be updated
        onUserRankingViewReady: function() {
            var self = this.self;
            self.fetchChallengeData();
            setInterval(self.fetchChallengeData.bind(self), self.fetchDelay);
        },
    },

    // Get scores from the server and call update on views
    // with the data received
    fetchChallengeData: function() {
        $.ajax({
            url: "{{ path('api_leaderboard')}}",
            type: 'GET',
            dataType: 'json',
            data: {action: 'leaderboard'},
        })
        .done(function(data) {
          Lite.EventManager.fireEvent('UpdateRankings', data.ranks);
        })
        .fail(function(data) {
            console.log("error");
        })
    },

});
Controller.registerToSource(Lite.EventManager);


// A loading icon spining and displaying "loading..."
var LoadingIcon = React.createClass({

    render: function() {
        return (
            <div>
                <button className="btn btn-lg btn-warning">
                    <i className="fa fa-circle-o-notch fa-spin fa-fw"></i>
                    Loading...
                </button>
            </div>
        );
    }
});




var UserRankingView = Lite.createClass({

  getInitialState: function() {
    return {ranks: undefined}
  },

  onComponentMounted: function() {
    console.debug("SENT");
    Lite.EventManager.fireEvent('UserRankingViewReady');
  },

  onEvent: {

    onUpdateRankings: function(emitter, scores) {
      // Give a rank to scores now that they are sorted
      for (var i = scores.length - 1; i >= 0; i--) {
        scores[i].rank = (i + 1);
      };
      this.self.setState({ranks: scores});
    },

  },

  render: function() {


    if(this.state.ranks == undefined){
      return (
        <div>
          <p>Loading Scores</p>
          <LoadingIcon />
        </div>
      );
    }

    if(this.state.ranks.length == 0){
      return (
        <div>
          Nobody has achieved anything yet ...
        </div>
      )
    }

    var scoreNodes = this.state.ranks.map(function(score) {
      return (
          <UserScoreView key={score.rank} score={score} />
      );
    });
    return (
        <table className="table table-bordered table-striped table-responsive">
          <thead>
            <tr>
              <th>Rank</th>
              <th>User</th>
              <th>Total points</th>
            </tr>
          </thead>
          <tbody>
            {scoreNodes}
          </tbody>
        </table>
    )
  },
});


// Represents a Score
var UserScoreView = Lite.createClass({
    render: function(){
        var rank = this.props.score.rank;
        var nbPoints = this.props.score.nbPoints;
        var user = this.props.score.user;
        var icon;
        var specialClass;
        if(rank == 1){
          icon = (<i className="fa fa-star" aria-hidden="true"></i>);
          specialClass = "success";
        }
        return (
          <tr className={specialClass}>
            <td>{rank} {icon}</td>
            <td>{user.username}</td>
            <td>{nbPoints}</td>
          </tr>
        );
    }
});



ReactDOM.render(
    <UserRankingView />,
    document.getElementById('ranks')
);



{% endblock %}